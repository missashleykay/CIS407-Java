******6.5.1: Recursive method: Writing the base case.*******

Write code to complete doublePennies()'s base case. Sample output for below program:
Number of pennies after 10 days: 1024

public class CalculatePennies {
// Returns number of pennies if pennies are doubled numDays times
   public static long doublePennies(long numPennies, int numDays) {
      long totalPennies;

      if(numDays==0)return numPennies;

      else {
         totalPennies = doublePennies((numPennies * 2), numDays - 1);
      }

      return totalPennies;
   }

// Program computes pennies if you have 1 penny today,
// 2 pennies after one day, 4 after two days, and so on
   public static void main (String [] args) {
      long startingPennies;
      int userDays;

      startingPennies = 1;
      userDays = 10;
      System.out.println("Number of pennies after " + userDays + " days: "
           + doublePennies(startingPennies, userDays));
   }
}
************************************************************************************

6.5.2: Recursive method: Writing the recursive case.

Write code to complete printFactorial()'s recursive case. Sample output if userVal is 5:
5! = 5 * 4 * 3 * 2 * 1 = 120

public class RecursivelyPrintFactorial {
   public static void printFactorial(int factCounter, int factValue) {
      int nextCounter;
      int nextValue;

      if (factCounter == 0) { // Base case: 0! = 1
         System.out.println("1");
      }
      else if (factCounter == 1) { // Base case: Print 1 and result
         System.out.println(factCounter + " = " + factValue);
      }
      else { // Recursive case
         System.out.print(factCounter + " * ");
         nextCounter = factCounter - 1;
         nextValue = nextCounter * factValue;

         printFactorial(nextCounter,nextValue);

      }
   }

   public static void main (String [] args) {
      int userVal;

      userVal = 5;
      System.out.print(userVal + "! = ");
      printFactorial(userVal, userVal);
   }
}
*************************************************************************
6.6.1: Writing a recursive math method.

Write code to complete raiseToPower(). Sample output if userBase is 4 and userExponent is 2 is shown below. Note: This example is for practicing recursion; a non-recursive method, or using the built-in method pow(), would be more common.
4^2 = 16

public class ExponentMethod {
   public static int raiseToPower(int baseVal, int exponentVal) {
      int resultVal;

      if (exponentVal == 0) {
         resultVal = 1;
      }
      else {
         resultVal = baseVal * raiseToPower(baseVal, exponentVal-1);
      }

      return resultVal;
   }

   public static void main (String [] args) {
      int userBase;
      int userExponent;

      userBase = 4;
      userExponent = 2;
      System.out.println(userBase + "^" + userExponent + " = "
        + raiseToPower(userBase, userExponent));
   }
}
********************************************************************************

6.9 LAB: All permutations of names

Write a program that lists all ways people can line up for a photo (all permutations of a list of Strings). The program will read a list of one word names (until -1),
and use a recursive method to create and output all possible orderings of those names, one ordering per line.

import java.util.Scanner;
import java.util.ArrayList;

public class PhotoLineups {

   // TODO: Write method to create and output all permutations of the list of names.
   public static void allPermutations(ArrayList<String> permList, ArrayList<String> nameList) {
   if (nameList.isEmpty()) {
            for (int i = 0; i < permList.size(); i++) {
                System.out.print(permList.get(i) + " ");
            }
            System.out.println();
        } else {
            for (int i = 0; i < nameList.size(); ++i) {
                ArrayList<String> newPerm = new ArrayList<String>(permList);
                newPerm.add(nameList.get(i));
                ArrayList<String> newNameList = new ArrayList<String>(nameList);
                newNameList.remove(i);
                allPermutations(newPerm, newNameList);
            }
        }
    }

    public static void main(String[] args) {
        Scanner scnr = new Scanner(System.in);
        ArrayList<String> nameList = new ArrayList<String>();
        ArrayList<String> permList = new ArrayList<String>();
        String name;
        while (true) {
            name = scnr.next();
            if (name.equals("-1")) break;
            nameList.add(name);
        }
        allPermutations(permList, nameList);
    }
}
*********************************************************************************
6.10 LAB: Number pattern
Write a recursive method called printNumPattern() to output the following number pattern.

Given a positive integer as input (Ex: 12), subtract another positive integer (Ex: 3) continually until 0 or a negative value is
reached, and then continually add the second integer until the first integer is again reached.

import java.util.Scanner;

public class NumberPattern {
    public static void printNumPattern(int num1, int num2) {
    if(num1 > 0){
      System.out.print(num1+ " ");
      printNumPattern(num1-num2, num2);
      System.out.print(num1+ " ");
    }
    else{
      System.out.print(num1+ " ");
    }
  }
   public static void main(String[] args) { 
      Scanner scnr = new Scanner(System.in);
      int num1;
      int num2;
      
      num1 = scnr.nextInt();
      num2 = scnr.nextInt();
      printNumPattern(num1, num2); 
   } 
} 
