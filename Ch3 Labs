3.9 LAB: Playlist (output linked list)

Given main(), complete the SongNode class to include the printSongInfo() method. Then write the Playlist class' printPlaylist() method
to print all songs in the playlist. DO NOT print the dummy head node.

import java.util.Scanner;

public class Playlist {

   public static void printPlaylist(SongNode songs){
       SongNode song = songs.getNext();
       while (song!=null) {
           song.printSongInfo();
           System.out.println();
           song = song.getNext();
       }
   }

   public static void main (String[] args) {
       Scanner scnr = new Scanner(System.in);

       SongNode headNode;
       SongNode currNode;
       SongNode lastNode;

       String songTitle;
       int songLength;
       String songArtist;

       // Front of nodes list
       headNode = new SongNode();
       lastNode = headNode;

       // Read user input until -1 entered
       songTitle = scnr.nextLine();
       while (!songTitle.equals("-1")) {
           songLength = scnr.nextInt();
           scnr.nextLine();
           songArtist = scnr.nextLine();

           currNode = new SongNode(songTitle, songLength, songArtist);
           lastNode.insertAfter(currNode);
           lastNode = currNode;

           songTitle = scnr.nextLine();
       }
      
       // Print linked list
       System.out.println("LIST OF SONGS");
       System.out.println("-------------");
       printPlaylist(headNode);
   }
}

**************

class SongNode {
   private String songTitle;
   private int songLength;
   private String songArtist;
   private SongNode nextNodeRef; // Reference to the next node

   public SongNode() {
       songTitle = "";
       songLength = 0;
       songArtist = "";
       nextNodeRef = null;
   }

   // Constructor
   public SongNode(String songTitleInit, int songLengthInit, String songArtistInit) {
       this.songTitle = songTitleInit;
       this.songLength = songLengthInit;
       this.songArtist = songArtistInit;
       this.nextNodeRef = null;
   }

   // Constructor
   public SongNode(String songTitleInit, int songLengthInit, String songArtistInit, SongNode nextLoc) {
       this.songTitle = songTitleInit;
       this.songLength = songLengthInit;
       this.songArtist = songArtistInit;
       this.nextNodeRef = nextLoc;
   }

   // insertAfter
   public void insertAfter(SongNode nodeLoc) {
       SongNode tmpNext;

       tmpNext = this.nextNodeRef;
       this.nextNodeRef = nodeLoc;
       nodeLoc.nextNodeRef = tmpNext;
   }

   // Get location pointed by nextNodeRef
   public SongNode getNext() {
       return this.nextNodeRef;
   }
   public void printSongInfo(){
       System.out.println("Title: "+this.songTitle);
       System.out.println("Length: "+this.songLength);
       System.out.println("Artist: "+this.songArtist);
   }

}
*************************************************************************************************************************

3.10 Grocery shopping list (linked list: inserting at the end of a list)

Given main() in the ShoppingList class, define an insertAtEnd() method in the ItemNode class that adds an element to the end 
of a linked list. DO NOT print the dummy head node.

import java.util.Scanner;

class ItemNode{
  
   private String item;
   private ItemNode nextNodeRef;
  
   public ItemNode() {
       item="";
       nextNodeRef=null;
   }
  
   public ItemNode(String itemInit) {
       this.item=itemInit;
       this.nextNodeRef=null;
   }
   public ItemNode(String itemInit,ItemNode nextLoc) {
       this.item=itemInit;
       this.nextNodeRef=nextLoc;
   }
   public void insertAfter(ItemNode nodeLoc) {
       ItemNode tmpNext;
      
       tmpNext=this.nextNodeRef;
       this.nextNodeRef=nodeLoc;
       nodeLoc.nextNodeRef=tmpNext;
   }
   public void insertAtEnd(ItemNode head,ItemNode newNode) {
       //store a reference to head
       ItemNode temp=head;
       //go to next node until next node is null
       while(temp.nextNodeRef!=null) {
           temp=temp.nextNodeRef;
       }
       //set the last Node to refer to newNode
       temp.nextNodeRef=newNode;

   }
   public ItemNode getNext() {
       return this.nextNodeRef;
   }
  
   public void printNodeData() {
       System.out.println(this.item);
   }
}
